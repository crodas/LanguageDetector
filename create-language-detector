#!/usr/bin/env php
<?php

// register the autoloader
require 'vendor/autoload.php';

// it could use a little bit of memory, but it's fine
// because this process runs once.
ini_set('memory_limit', '1G');

// parse parameters
$args = CommandLine::parseArgs($_SERVER['argv']);

$samples = array();
$options = array();

foreach ($args as $key => $arg) {
    if (is_numeric($key)) {
        $samples[$key] = $arg;
    } else {
        $options[$key] = $arg;
    }
}

if (count($samples) === 0 || isset($options['help']) || isset($options['?'])) {
    echo "Usage: ".$_SERVER['argv'][0]." <language sample files> [options]\n";
    echo "Options:\n";
    echo "    --output, -o <filename>    Sets the output script file path. Defaults to 'language.php'\n";
    echo "    --help, -?                 Print this help\n";
    exit;
}


$outputFile = 'language.php';

if (isset($options['output']))  { $outputFile = $options['output']; }
if (isset($options['o']))       { $outputFile = $options['o']; }


// we load the configuration (which will be serialized
// later into our language model file
$config = new LanguageDetector\Config;

$c = new LanguageDetector\Learn($config);
foreach ($samples as $sample) {
    foreach (glob($sample) as $file) {
        // feed with examples ('language', 'text');
        $c->addSample(basename($file), file_get_contents($file));
    }
}

// some callback so we know where the process is 
$c->addStepCallback(function($lang, $status) {
    echo "Learning {$lang}: $status\n";
});

// save it in `datafile`. 
// we currently support the `php` serialization but it's trivial
// to add other formats, just extend `\LanguageDetector\Format\AbstractFormat`. 
//You can check example at https://github.com/crodas/LanguageDetector/blob/master/lib/LanguageDetector/Format/PHP.php
$c->save(\LanguageDetector\AbstractFormat::initFormatByPath($outputFile));
